package main
import (
	"fmt"
	"net/http"
	_"github.com/go-sql-driver/mysql"
	"github.com/go-xorm/xorm"

	"encoding/json"
	"io/ioutil"
)

type Students struct {
	Id 		int 		`json:"id" xorm:"not null pk int 'id'"`
	Name 	string		`json:"name" xorm:"not null VARCHAR(100) 'sname'"`
	Gender 	int			`json:"gender" xorm:"not null int 'gender'"`
	Class	int			`json:"class" xorm:"not null int 'class'"`
}

type Studentslice struct {
	ReqStu []Students	`json:"reqstu"`
}

type Chars struct {
	Chars	string		`json:"chars"`
}

var engines *xorm.Engine

func init() {

	var err error
	engines, err = xorm.NewEngine("mysql", "root:123456@tcp(127.0.0.1:3306)/testdb?charset=utf8")

	engines.ShowSQL(true)
	if err != nil {
		fmt.Println(err)
		return
	}

	if err := engines.Ping() ; err != nil {
		fmt.Println(err)
		return
	}
}

type sayHello struct{
}


func (s *sayHello) ServeHTTP(w http.ResponseWriter, r *http.Request){
	fmt.Println("sayhello")
	fmt.Fprintf(w,"sayhello")
}



func insertSQL(w http.ResponseWriter, r *http.Request)  {

	r.ParseForm()

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误~")
		fmt.Fprintf(w,"请求错误~")
	}

	resultStr := string(result)

	fmt.Fprint(w,resultStr)
	fmt.Println(resultStr)
	r.Body.Close()

	var s Studentslice

	if err := json.Unmarshal([]byte(result),&s) ; err == nil {

		fmt.Println(s)
		affected, err := engines.Insert(&s.ReqStu)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println(affected)
		for i := 0; i < len(s.ReqStu); i++ {
			fmt.Fprintf(w,"已插入ID为 %d ,名字为 %s ,性别为 %d , 班级为 %d 的学生资料\n",s.ReqStu[i].Id,s.ReqStu[i].Name,s.ReqStu[i].Gender,s.ReqStu[i].Class)

		}
	}else {
		fmt.Println(err)
	}


	/*
	test := new(students)
	test.Id = 200
	test.Name = "erkang"
	test.Gender = 1
	test.Class = 13
	_, err = engines.Insert(test)
	if err != nil {

	}
	*/

}


func getSQL(w http.ResponseWriter, r *http.Request)  {

	r.ParseForm()

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误~")
		fmt.Fprintf(w,"请求错误~")
	}

	defer r.Body.Close()

	s := new(Students)
	if err := json.Unmarshal([]byte(result),&s); err == nil {
		fmt.Println(s)

	//stu := new(students)
	//stu.Id = 123

		has,err := engines.Where("id=?",s.Id).Get(s)
		if err != nil {
			return
		}
		if has == true {
			fmt.Println(has)
			fmt.Fprintf(w,"查询到学号 %d ,学生姓名 : %s ,性别 : %d , 班级 : %d",s.Id,s.Name,s.Gender,s.Class)

		}else{
			fmt.Fprintf(w," 不存在的 ID , 错误代码为",err)
		}
	}
}



func likegetSQL(w http.ResponseWriter, r *http.Request) {

	r.ParseForm()

	result, err := ioutil.ReadAll(r.Body)
	if err != nil {
		fmt.Println("请求错误~")
		fmt.Fprintf(w, "请求错误~")
	}

	fmt.Println(string(result))

	var s Studentslice
	chars := new(Chars)
	if err := json.Unmarshal([]byte(result), &chars); err == nil {

		engines.Where("sname like ?", "%"+chars.Chars+"%").Find(&s.ReqStu)

		fmt.Fprintf(w,"总共找到 %d 个学生 \n搜索词为 %s\n",len(s.ReqStu)-1,chars.Chars)

		for i := 0; i < len(s.ReqStu); i++ {
			fmt.Fprintf(w, "学号 %d ,student 姓名 : %s ,性别 : %d , 班级 : %d\n",s.ReqStu[i].Id, s.ReqStu[i].Name, s.ReqStu[i].Gender, s.ReqStu[i].Class)
		}
	}
}


func deleteSQL(w http.ResponseWriter, r *http.Request)  {


	r.ParseForm()

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误~")
		fmt.Fprintf(w,"请求错误~")
	}

	defer r.Body.Close()

	s := new(Students)
	if err := json.Unmarshal([]byte(result),&s); err == nil {
		fmt.Println(s)

		has,err := engines.Where("id=?",s.Id).Get(s)
		if err != nil {
			return
		}
		if has == true {
			fmt.Println(has)
			fmt.Fprintf(w,"将删除的学生数据\n学号 %d ,学生姓名 : %s ,性别 : %d , 班级 : %d\n",s.Id,s.Name,s.Gender,s.Class)

		}else{
			fmt.Fprintf(w," 不存在的 ID , 错误代码为",err)
		}

		affectedDelete, err := engines.Id(s.Id).Delete(s)

		if err != nil {
			fmt.Println("delete error")

		}

		fmt.Println(affectedDelete)
		fmt.Fprintf(w,"删除学生数据成功\n")
	}
	/*
	test := new(Students)
	test.Id= 5
	if  test.Id == 0 {
		//return Error("miss id")
		fmt.Fprintf(w,"缺少 id")
	}
	_, err = engines.Where("id=?",test.Id).Delete(test)


	if err != nil {
		fmt.Println("delete error")
	}
	*/
}

func updateSQL(w http.ResponseWriter, r *http.Request) {
	/*
	stu := new(Students)
	stu.Id = 123
	stu.Name = "xiao99"
	stu.Gender = 0
	stu.Class = 9
	*/

	r.ParseForm()

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误~")
		fmt.Fprintf(w,"请求错误~")
	}

	resultStr := string(result)

	fmt.Fprint(w,"%s\n",resultStr)
	fmt.Println(resultStr)
	r.Body.Close()

	s := new(Students)

	if err := json.Unmarshal([]byte(result),&s) ; err == nil {

		has,err := engines.Where("id=?",s.Id).Get(s)
		if err != nil {
			fmt.Println("数据错误")
		}

		if has == false {
			fmt.Println("\n学号存在,准备更新\n")
			fmt.Fprintf(w,"\n学号存在,准备更新\n")

			affectedUpdate,err := engines.Id(s.Id).MustCols("gender").Update(s)
			if err != nil {
					fmt.Println("update error")
			}

			fmt.Println(affectedUpdate)
			fmt.Fprintf(w,"更新的学生数据为\n学号 %d 姓名 %s 性别 %d 班级 %d",s.Id,s.Name,s.Gender,s.Class)
		}else {
			fmt.Fprintf(w,"已有相同数据")
		}
	}else {
		fmt.Fprintf(w,"请求错误")
	}
}




func hello(w http.ResponseWriter, r *http.Request){
	fmt.Println("hello")
	fmt.Fprintf(w,"hello")
}

func testsql(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	fmt.Println(r.Form)

	result, err:= ioutil.ReadAll(r.Body)
	if err != nil {

	}

	fmt.Println(string(result))
	fmt.Fprintf(w,"%s",result)
}


func main() {
	t:=&sayHello{}
	http.HandleFunc("/",hello)
	http.Handle("/index",t)
	http.HandleFunc("/insert",insertSQL)
	http.HandleFunc("/get",getSQL)
	http.HandleFunc("/delete",deleteSQL)
	http.HandleFunc("/update",updateSQL)
	http.HandleFunc("/likeget",likegetSQL)
	http.HandleFunc("/test",testsql)
	http.ListenAndServe(":443",nil)
}
