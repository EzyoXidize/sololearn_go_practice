package main
import (
	"fmt"
	"net/http"
	_"github.com/go-sql-driver/mysql"
	"github.com/go-xorm/xorm"

	"encoding/json"
	"io/ioutil"
)

type students struct {
	Id 		int 		`json:"id" xorm:"not null pk int 'id'"`
	Name 	string		`json:"name" xorm:"not null VARCHAR(100) 'sname'"`
	Gender 	int			`json:"gender" xorm:"not null int 'gender'"`
	Class	int			`json:"class" xorm:"not null int 'class'"`
}

type studentslice struct {
	ReqStu []students
	ReqID	string
}


var engines *xorm.Engine

func init() {

	var err error
	engines, err = xorm.NewEngine("mysql", "root:123456@tcp(127.0.0.1:3306)/testdb?charset=utf8")

	engines.ShowSQL(true)
	if err != nil {
		fmt.Println(err)
		return
	}

	if err := engines.Ping() ; err != nil {
		fmt.Println(err)
		return
	}
}

type sayHello struct{
}


func (s *sayHello) ServeHTTP(w http.ResponseWriter, r *http.Request){
	fmt.Println("sayhello")
	fmt.Fprintf(w,"sayhello")
}



func insertSQL(w http.ResponseWriter, r *http.Request)  {

	r.ParseForm()

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误")
		fmt.Fprintf(w,"请求错误")
	}

	r.Body.Close()

	var s studentslice
	json.Unmarshal([]byte(result),&s)
	fmt.Println(s.ReqStu)

	affected, err := engines.Insert(s.ReqStu)

	//for i := 0; i < len(s.reqStu); i++ {


	//	fmt.Println(s.reqStu[i].Id)
	//	fmt.Println(s.reqStu[i].Name)
	//	fmt.Println(s.reqStu[i].Gender)
	//	fmt.Println(s.reqStu[i].Class)

	//fmt.Fprintf(w,"插入第 %d 号 ,student 姓名 : %s ,性别 : %d , 班级 : %d\n",s.reqStu[i].Id,s.reqStu[i].Name,s.reqStu[i].Gender,s.reqStu[i].Class)


	//	if err != nil {
	//		return
	//	}

	//	fmt.Println(affected)
	//}
	/*
		stu := new(students)
		stu.Id = 150
		stu.Name = "xiaolvlv"
		stu.Gender = 0
		stu.Class = 13
		_, err := engines.Insert(stu)
		if err != nil {
			return
		}
	*/
	test := new(students)
	test.Id = 200
	test.Name = "erkang"
	test.Gender = 1
	test.Class = 13
	_, err = engines.Insert(test)
	if err != nil {

	}
	fmt.Fprintf(w,string(affected))
	fmt.Fprintf(w,"插入第 %d 号 ,student 姓名 : %s ,性别 : %d , 班级 : %d\n",s.ReqStu[0].Id,s.ReqStu[0].Name,s.ReqStu[0].Gender,s.ReqStu[0].Class)
	fmt.Fprintf(w,"插入第 %d 号 ,student 姓名 : %s ,性别 : %d , 班级 : %d\n",test.Id,test.Name,test.Gender,test.Class)


}


func getSQL(w http.ResponseWriter, r *http.Request)  {

	r.ParseForm()
	fmt.Println(r.Form)

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误")
		fmt.Fprintf(w,"请求错误")
	}

	defer r.Body.Close()

	var s studentslice
	json.Unmarshal([]byte(result),&s)
	fmt.Println(s.ReqStu)

	//stu := new(students)
	//stu.Id = 123

	has,err := engines.Where("id=?",s.ReqStu[0].Id).Get(s.ReqStu)

	if err != nil {
		return
	}
	if has == true {
		fmt.Println(has)
		fmt.Println(s.ReqStu)
		fmt.Fprintf(w,"get 第 %d 号 ,student 姓名 : %s ,性别 : %d , 班级 : %d",s.ReqStu[0].Id,s.ReqStu[0].Name,s.ReqStu[0].Gender,s.ReqStu[0].Class)

	}else{
		fmt.Fprintf(w," 不存在的 ID , 错误代码 ",err)
	}

}

func deleteSQL(w http.ResponseWriter, r *http.Request)  {

	r.ParseForm()
	fmt.Println(r.Form)

	result, err:= ioutil.ReadAll(r.Body)

	if err != nil {
		fmt.Println("请求错误")
		fmt.Fprintf(w,"请求错误")
	}


	defer r.Body.Close()

	var s studentslice
	json.Unmarshal([]byte(result),&s)
	fmt.Println(s.ReqStu)

	affectedDelete, err := engines.Where("id=?",s.ReqStu[0].Id).Delete(s.ReqStu)

	if err != nil {
		fmt.Println("delete error")
	}



	test := new(students)
	test.Id= 5
	if  test.Id == 0 {
		//return Error("miss id")
		fmt.Fprintf(w,"缺少 id")
	}

	_, err = engines.Where("id=?",test.Id).Delete(test)


	if err != nil {
		fmt.Println("delete error")
	}

	fmt.Println(affectedDelete)

}

func updateSQL(w http.ResponseWriter, r *http.Request) {

	stu := new(students)
	stu.Id = 123
	stu.Name = "xiao99"
	stu.Gender = 0
	stu.Class = 9

	has ,err := engines.Where("id=?",stu.Id).Get(stu)

	if err != nil {
		fmt.Println("更新成功")
	}

	if has == false {
		fmt.Println("更新成功")
		fmt.Fprintf(w,"更新成功")
	}

	affectedUpdate,err := engines.Where("id=?",stu.Id).Update(stu)

	if err != nil {
		fmt.Println("update error")
	}

	fmt.Println(affectedUpdate)
	fmt.Fprintf(w,"更新 ID: %d 学生成功, 新名字为 : %s",stu.Id,stu.Name)


	test := new(students)
	test.Id = stu.Id

	_, err = engines.Id(test.Id).MustCols("id").Update(test)
	if err != nil {
		//return HandleErr(err)
		fmt.Println("更新失败")
	}


}


func likegetSQL(w http.ResponseWriter, r *http.Request)  {

	stu := make([]students,0)
	var chars string = "lv"

	//has,err := engines.Where("column like ?", "%"+chars+"%").Get(stu)
	//if err != nil {
		//return HandleErr(err)
	//	fmt.Println("错误")
//	}

//	if has == false {
	//	//return SystemError()
	//	fmt.Println("不存在")
	//}else {

	engines.Where("sname like ?" ,"%"+chars+"%").Find(&stu)

	for i := 0; i < len(stu); i++ {
		fmt.Println(stu[i].Id)
		fmt.Println(stu[i].Name)
		fmt.Println(stu[i].Gender)
		fmt.Println(stu[i].Class)
		fmt.Fprintf(w,"get 第 %d 号 ,student 姓名 : %s ,性别 : %d , 班级 : %d\n",stu[i].Id,stu[i].Name,stu[i].Gender,stu[i].Class)

	}
}


func hello(w http.ResponseWriter, r *http.Request){
	fmt.Println("hello")
	fmt.Fprintf(w,"hello")
}

func testsql(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	fmt.Println(r.Form)

	result, err:= ioutil.ReadAll(r.Body)
	if err != nil {

	}

	fmt.Println(string(result))
	fmt.Fprintf(w,"%s",string(result))
}


func main() {
	t:=&sayHello{}
	http.HandleFunc("/",hello)
	http.Handle("/index",t)
	http.HandleFunc("/insert",insertSQL)
	http.HandleFunc("/get",getSQL)
	http.HandleFunc("/delete",deleteSQL)
	http.HandleFunc("/update",updateSQL)
	http.HandleFunc("/likeget",likegetSQL)
	http.HandleFunc("/test",testsql)
	http.ListenAndServe(":443",nil)
}
